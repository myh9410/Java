*day10*	클래스 - 추상 클래스

	재정의, 다형성 예제


*추상 클래스*

	abstract 추상 : 관념적인, 상상의
		실체는 있지만 --> 부르기위한 하나의 상징을 만들자!

		상징만이 존재하고 오히려 실체는
			하위 클래스에 가서 만들어진다.
				
					동물 : 상징부여해서 부른다.	
					(상징적인 단어, 추상 클래스 : 하나의 카테고리를 제공)
					부모 클래스!! - 여러 자식 클래스를 건사하게 된다.
					다형성을 만들 때 필요하다.
					구심점 역할을 수행한다.	

	우리집에 실체화된 인스턴스 : 진돗개	  고양이	거북이


	추상 클래스 {

		메서드();	<-- 구체화 될 수 없는 메서드!!!
					실제로 뭔가를 수행할 수 없는 상태일 경우가 많다.
	}				이 메서드를 미완성인 채로 두자!
	abstract class Product{  <-- 미완성 클래스가 된다. 따라서 인스턴스를 만들 수 없다.
								new Product()할 수 없다.
								자식의 부모 역할만 가능!!	
		void printInfo(){}				Product p =null;가능
		abstract void manual();	//미완성 메서드		추상 클래스는 다른 클래스를
	}							support한다.
	
	
	class TV extends Product{
		void manual(){	//필수 재정의
			printInfo();	//반드시 재정의할 필요는 없다.
			syso("TV의 기능을 소개합니다.");
		}
	}
	class Radio extends Product{
		void manual(){
			syso("Radio의 기능을 소개합니다.");
		}
	}
	class Notebook extends Product{
		//부모로부터 미완성 메서드인 abstract void manual()을 물려받음....
		    class Notebook 앞에 abstract를 붙여주면 오류 해제... 더이상 Notebook을 못만든다.
		    은닉화 시키면 미완성 메서드가 가라앉고 재정의한 메서드가 명시적이 된다.
		
	}



인터페이스
	타입이다. 클래스와 같은 타입이다.
	오로지 추상 메서드만 만들 수 있다. (생성자나 일반 메서드, 변수가 있으면 에러!)

	추상성을 극대화 시켜 놓은 타입! - 하나의 지침, 표준화 작업에 사용된다.
	(상수만큼은 사용가능)

	abstract class Item{	//추상클래스!! -> 만약 추상 메서드만 존재한다면....
		int num, num2, num3;					인터페이스로 만들자!
		
		Item(){}

		abstract void m();
		abstract void n();
		abstract void o();
	}

	//추상 메서드만 존재하네~~		//abstract 안써줘도 된다.
	interface Item{
		void m();			재정의 할 때 무조건 public을 써야한다.
		void n();			public이 안붙었는데?? 그래도 public을 재정의할 때 붙이자!
		void o();			보통은 자동으로 만드니까 간과되기 쉽다.

	}
	----------------------------------------------------------------------

	class Pen	인터페이스 Item하고 붙일래	{
	class Pen	implements Item	{	//implements : 작성하다 구현하다
		무조건 메서드 재정의 있어야 한다.
	}
	----------------------------------------------------------------------

	class Eraser{}
	class Pen{}
	interface Useful{}

	class Pen extends Eraser{}

	Pen p = new Pen();
	p.write();
	p.eraser();

	class Pen extends Eraser implements Useful{//pen에는 eraser기능과 useful기능 다 들어있음.

	}
	----------------------------------------------------------------------
	class Eraser{}
	class Pen{}
	class Color{}
	interface Useful{}

	class Pen extends Eraser, Color implements Useful{}	에러... 상속은 하나만!

	Color를 인터페이스로 바꿔볼까?
	class Color{}	-> interface Color{}

	class Pen extends Eraser implements Useful, Color{}	*인터페이스는 여러개 붙일 수 있다.
	----------------------------------------------------------------------

	interface : "환경을 제공한다."
		UX / UI		User Experiance / User Interface

	mp3 플레이어
	cd 플레이어
	비디오 플레이어
	곰 플레이어			

		-> 공통 : 플레이 일시정지 멈춤
	
jar - java archieve resource
--------------------------------------------------------------------------------
Java2
*익셉션 - 예외처리
  Exception(에러)
  에러 - 관리하는 기능    debugger
	 출력기능
	 실행기능
	   jdk	(자바가상머신)

	Exception 발생하면 체계적으로 "에러 상황"을 관리하겠다.
		- 산술에러			ArithmeticException
		- 배열에러			ArrayIndexOutOfBoundsException
		- 파일 입출력 에러		IOException
		- 파일 없음   에러		FileNotFoundException
		- ....				NullPointerException

  처리	try catch()	-->> 목적: 에러가 나더라도 프로그램이 정상적으로 돌아갈 수 있도록 하자

	try{
		에러가 발생될 거 같니?
		
	} catch(어떤 에러 상황이니?	변수){

		변수를 갖고 내용을 확인 할 수 있다!
	} catch () {
	
	} catch () {

	} finally {
		//에러 여부에 상관없이 무조건 실행하는 영역
	}
  


------------------------------------------------------------------------------
*내일*
	java.lang 패키지






























